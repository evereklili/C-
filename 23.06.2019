    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    namespace ConsoleApp1
    {
        class Program
        {
            static void Main(string[] args)
            {

                Program cagirGelsinDayi = new Program();
                cagirGelsinDayi.gelenElci();

            }  //her şey bir sınıftır c# da. Her sınıfın iş yapan çeşitli elemanları vardır. Bunlara method veya yöntem diyeceğiz. 

            //public void gelenElci()
            //{
            //    Console.WriteLine("Bir tuşa basınız.");
            //    Console.ReadLine();
            //    Console.WriteLine("Bir tuşa bastınız...");
            //}


            //public void gelenElci()
            //{

            //    //C# dilinde veriler ikiye ayrılır. Birincisi referans veri tipleri ikincisi ise değer tip şeklindedir. 
            //    //C# da değişkenler, farklı veri tipleri saklayabildiğimiz yapıları tanımlama da kullanılan şeylerdir. 
            //    /*
            //     * Verinin üzerinde işlem yaptığı bölgeler: 
            //     * 1.Stack bölgesi: RAM anlarız. Microişlemcide bulunan Stack Prointer vasıtasıyla doğrudan erişilebilinir. Stack Pointer o anda çalışan programın bellekte yerini tutan şeydir. 
            //     * Bu noktada stack pointer tutulacak verinin boyutunu bilmek isteyecektir. İşte bunu da değişkenlerin başına yazılacak tiplerle belirleriz.
            //     * 2.Heap alanı: RAM de bulunan bir hafıza alanıdır. Stactan farklı olarak, stack ayrılacak yer derleyici tarafından bilinmesi gerekirken, heap da bu alanın bilinmesine gerek yoktur. 
            //     *  bu sayede programa büyük esneklik sağlamaktadır. new anahtar kelimesiyle bu iş akışını sağlarız. Hızı diğer stack mekanizmasına göre daha yavaştır.     
            //     *  3.Register: Stack ve heap mekanizmasınına göre çok daha hızlıdır. Sebebi ise Regiser bölgesinde ikinci bir bellek olmamasıdır. Mikroişlemcileirin içinde ama cpu dışında yer alan sınırılı sayıda yapılardır. 
            //     *  bu register yapılarına erişmek derleyicinin tamamen insiyatifinden olan bir şeydir. 
            //     *  4.Static Bölge: Bellekteki herhangibir sabit bölgeyi temsil eder. Static verilerde tutulan veriler programın bütün çalışma süresince saklanır. static özelliğini vermek için 
            //     *  "static" anahtar kelimesi kullanılır. 
            //     * 5.Sabit Bölge: Sabit (constant) değerler genellikle program içine gömülü halde gelirler. Bu değerlerin değiştirilmesi mümkün değildir. 
            //     * Sadece okuma amaçlı olduğundan dolayı sadece ROM tutulurlar. Read Only Memory. 
            //     * 6.RAM Olmayan Bölge:Bellek bölgesini temsil etmeyen disk alanların temsil eder. 
            //     * 
            //     * */
            //    //C# bir değişkene değer atayıncaya kadar kullanmamıza müdase etmez! 
            //    int Ucret = 10;
            //    const int UCRET=500;

            //    Console.WriteLine(Ucret);
            //    Console.WriteLine(UCRET);
            //   /*
            //    * Sabitlere tanımlandıkları değer atanır.ilk değer vermeden const yani sabitler sabit olmaz. 
            //    * Sabit ifadelere ancak ilk ifade atanabilir. 
            //    * sabit ifadeler static olduklarından ayrıca bir static yapmak hata verir. 
            //    * 
            //    * */

            //}
            //public void gelenElci()
            //{
            //    /*
            //     * Değer tipleri, değişkenin değerlerini direk belleğe alır Referans tipler ise başka bir nesneye referans olarak kullanılırlar. 
            //     *Yani referans tipler aslında bir kaç bellek bölgesi olan veri türlerini(bunlara kısaca nesne diyeceğiz)  
            //     *adreslerini saklar. Değer tipleri yaratıldıklarında stack dediğimiz bellek bölgesinde oluşturulur, referans tipler ise kullanımı biraz daha sınırlı olan heap dediğimiz bellek bölgesinde saklanırlar. 
            //     * 
            //     */
            //    int a = new int();
            //    bool b = new bool();
            //    char c = new char();
            //    float d = new float();
            //    System.Console.WriteLine(a);
            //    System.Console.WriteLine(b);
            //    Console.WriteLine(c);
            //    Console.WriteLine(d);
            //Değer tipleri genel olarak yapı tipleri ve enum sabitleri olarak ikiye ayrılır. Temel veri türlerinden olan int 
            //double float, ve bool 
            //}
            //public void gelenElci()
            //{
            //    /*
            //     * 
            //     * c# gibi dillerde nesne çok önemlidir. %100 NYP her şey bir tek nesneden türer. 
            //     * toString bütün nesnelerde ve türlerde kullanılır.  temel veri kümesinin atası Object sınıfıdır. 
            //     * bütün method türleri mevcuttur. ToString methodu bütün veri türleri ve referans türlerinde kullanılabilinir. 
            //     *  
            //     * */

            //    Console.WriteLine(3.ToString());
            //    Console.WriteLine(36.6f.ToString());

            //    //ToString methodunu ayrıntılı görmek için bakalım.: 
            //    int a = 5, b = 7;
            //    string a1 = a.ToString();
            //    string a2 = b.ToString();
            //    Console.WriteLine(a + b);
            //    Console.WriteLine(a1 + a2);


            //}
            //public void gelenElci()
            //{
            //    /*
            //     * Boxing işlemi aslında bir kutulama işlemidir. Popüler bir çok dilde referans tipleri ile 
            //     *Bir nesnenin object türüne bilinçli veya bilinçsiz olarak dönüştürülmesidir, Boxing işlemi. 
            //     * Object nesneleri referans olduğu gibi heap dediğimiz bellektede tutulabilinir. 
            //     * Değer tipleri ise stack dediğimiz bölgede tutulur. O Zaman bir değer tipinde refarans tipi nesneye atadığımzda stack bölgede tutulan nesne aynı zamanda bit olarak heap alanına da kopyalanır. 
            //     * Ve stack bölgesindeki object türünden olan değişken de bu heap bölgesini gösterecek şekilde ayarlanır. bütün bu işlemlere boxing işlemleri deniz. 
            //     *  öRNEK: int i=50; //i  stack bölgesindedir. 
            //     *  object o=(object)i; //
            //     *  
            //     *  unboxing işlemi olması için boxing işlemi yapılmış olması gerekir, doğru türe dönüştürülmesi gerekmektedir. 
            //     *  
            //     *  
            //     *  
            //     */
            //    int i = 50; object o = i; //boxing
            //    Console.WriteLine(o);
            //    int j = (int)o;  //unboxing
            //    Console.WriteLine(j);
            //}
            //public void gelenElci()
            //{
            //    string s1, s2;
            //    int sayi1, sayi2;
            //    int toplam;
            //    Console.WriteLine("ilk sayıyı giriniz:");
            //    s1 = Console.ReadLine();
            //    Console.WriteLine("ikinci sayıyı giriniz:");
            //    s2 = Console.ReadLine();
            //    sayi1 = Convert.ToInt32(s1);
            //    sayi2 = Convert.ToInt32(s2);
            //    toplam = sayi1 + sayi2;
            //    Console.WriteLine("Toplam=" + toplam.ToString());

            //}
            //public void gelenElci()
            //{
            //    bool b1 = 60 < 50;
            //    bool b2 = 50 < 60;
            //    bool b3 = 20.54 > 65.70;
            //    bool b4 = 10.4f < 5.4f;
            //    Console.WriteLine("{0}\n {1} \n {2} \n {3} \n ", b1,b2,b3,b4);  
            //}
            //public void gelenElci()
            //{
            //    object  i = "aa";
            //    string s = i as string;  //as farklı türler arasında dönüşümü sağlar. dönüşüm başarısız ise null dönüşü sağlanır. 
            //    Console.WriteLine(s);
            //    //is operatörü; çalışma anında bir nesnenin türünün operant ile verilen türe uyumlu olup olmadığını kontrol eder. 
            //    //<ifade> is <tür>

            //    bool b1 = !(650 is int);
            //    bool b2 = !(60 is bool);
            //    bool b3 = 65.70 is object;
            //    bool b4 = 5.4f is bool;
            //    Console.WriteLine("{0}\n {1} \n {2} \n {3} \n ", b1, b2, b3, b4,i);
            //    byte b5 = 25;
            //    byte b6 = (byte)~b5;
            //    Console.WriteLine("{0} \n {1} \n ", b5, b6);



            //}
            //public void gelenElci()
            //{
            //    byte b = 7, a = 1, c=100;
            //    Console.WriteLine($"b= {b}, a={ a}, c={c}.  ");
            //    a = b = c ;
            //    Console.WriteLine($"b= {b}, a={ a}, c={c}.  ");
            //}

            // public int method2(int not)
            //{
            //    if (not > 100)
            //        retu rn(Console.WriteLine("Yanlış değer girdiniz."));

            //}
            //public void gelenElci()
            //{
            //    //ternary operator  bu operatör if else blok işini yapar. 
            //    // koşul?dogru_deger:yanlış deger; 

            //    int notunuz;
            //    Console.WriteLine("Lütfen notunuzu giriniz.");
            //    notunuz = int.Parse(Console.ReadLine());
            //    //&, * ve ->, sizeOf() operatörleri genelde gösterici operatör denmekteidr.   nokta . operatörü ile bir sınıf nesnesinin elemanına ulaşırız. 
            //    /* 
            //     * ifade ile deyim arasındaki farkı iyi bilmek gerekmektedir. 
            //     * 
            //     * a=(a<<b)+c bir ifadedir. 
            //     * a=(a<<b)+c; ise bir deyimdir. sonunda ; vardır. ! 
            //     * 
            //     */
            //    if (notunuz > 100)
            //        Console.WriteLine("Yanlış not girdiniz. Girdiğiniz değer 100 den büyük olamaz!");
            //    else
            //        method2();

            //public void gelenElci()
            //{
            //    int not=0;
            //    Console.WriteLine("Notunuzu giriniz:(0-100) :");
            //    not =Convert.ToInt32(Console.ReadLine());
            //    if (not < 0 || not > 100)
            //    {
            //        Console.WriteLine("Yanlış not giriniz....!");
            //        gelenElci();
            //    }

            //    else if (not > 90)
            //        Console.WriteLine("Notunuz: A");
            //    else if (not > 80)
            //        Console.WriteLine("Notunuz: B");
            //    else if (not > 70)
            //        Console.WriteLine("Notunuz: C");
            //    else if (not >=50)
            //        Console.WriteLine("Notunuz: D");
            //    else
            //        Console.WriteLine("Desten kaldınız...");

            //    Console.WriteLine("Başka not arayacak mısız? Evet mi? (3),Hayır mı? (2) ");
            //    int inot = Convert.ToInt32(Console.ReadLine());
            //    if(inot==3)
            //    {
            //        gelenElci();

            //    }else
            //    {

            //    }






























            //public void gelenElci()
            //{
            //    float sonuc = 0;
            //    int sayi1, sayi2;
            //    string Islem;
            //    Console.WriteLine("İşlem yapılacak ilk sayıyı giriniz: ");
            //    sayi1 = Convert.ToInt32(Console.ReadLine());
            //    Console.WriteLine("İşlem yapılacak ikinci sayıyı giriniz:");
            //    sayi2 = Convert.ToInt32(Console.ReadLine());

            //    Console.WriteLine("\n Toplama -->t");
            //    Console.WriteLine("\n Çıkarma ---> c");
            //    Console.WriteLine("\n Çarpma --> m");
            //    Console.WriteLine("\n Bölme --> b");

            //    Console.WriteLine("İşlemi seçiniz:");
            //    Islem = Console.ReadLine();
            //    if(Islem=="b")
            //    {
            //        if(sayi1!=0||sayi2!=0)
            //        {
            //            sonuc = sayi1 / sayi2;
            //            Console.WriteLine("Sonuç=",sonuc);
            //        }
            //        else
            //        {
            //            Console.WriteLine("Sıfır böleni olamaz!!");


            //        }

            //    }

            //    else if(Islem=="t")
            //    {
            //        sonuc = sayi1 + sayi2;
            //        Console.WriteLine("Sonuç=", sonuc);
            //    }
            //    else if(Islem=="m")
            //    {
            //        sonuc = sayi1* sayi2;
            //        Console.WriteLine("Sonuç=", sonuc);
            //    }
            //    else if(Islem=="c")
            //    {
            //        sonuc = sayi1 - sayi2;
            //        Console.WriteLine("Sonuç=", sonuc);
            //    }
            //    else
            //    {
            //        Console.WriteLine("İşlem yapma yeteneğiniz sonlandırılmıştır.");
            //    }





            //}


            //public void gelenElci()
            //{
            //    object nesne = 10;
            //    switch(nesne) //sabit olan yapıyı switch içine yazdık. 
            //    {
            //        case String c: // tür deseni 
            //            Console.WriteLine("Yazı Değeri:" + c);
            //            break;
            //        case int s when (s > 10): //koşullu case ifadesi 
            //            Console.WriteLine("Sayınız 10dan büyükse ");
            //            break;
            //        case int s: //tür deseni
            //            Console.WriteLine("Nesne int tipinde ve 10dan büyük değilse");
            //            break;
            //        case null: //sabit desen;
            //            break;
            //        default:
            //            Console.WriteLine("<Tanımlanamayan aygıt>");
            //            break;

            //    }
            //}


            //public int gelenElci()
            //{


            //    int k = 0;
            //    double toplam = 0;
            //    int basla = 0;
            //    for(int i=basla;i<=100000;i++)
            //    {
            //        toplam = toplam + (double)i;
            //        Console.WriteLine($"{i}. sayıya kadar toplamı: " + toplam);
            //        char ch;
            //       // for (ch = Convert.ToChar(Console.ReadLine()); ch != 'o'; ch = Convert.ToChar(Console.ReadLine())) ;
            //         for(; ;)
            //        {

            //            Console.WriteLine("k" + k);
            //            k++;

            //        }


            //    }
            //    return basla;
            //}

            public void gelenElci()
            {
                int adet = 0, toplam = 0;
                for (int mi = 1; mi <= 1000000; mi++)
                {
                    if ((mi % 5 == 0) && (mi % 7 != 0))
                    {
                        Console.WriteLine(mi);
                        toplam = toplam + mi; adet++;

                    }
                }
                Console.WriteLine("{0} sayı bulundu", adet);
                Console.WriteLine("Toplamları={0}", toplam);
            }
        }  
    } 
